  #!/usr/bin/python2.7

##Time
from datetime import datetime
from time import gmtime, strftime, sleep

##Data Acqusition
from xml.dom import minidom
import urllib2

## Rasperry libraries
import RPi.GPIO as GPIO
from RPLCD import CharLCD

##define staic values

## LCD SETUP
### Pin number has to be change to the pin numbers you are using on your Raspberry Pi.
### The LCD is a 40x4 display. The library RPLCD can only handle 40x2 so the LCD has to be set up as two 40x2 displays.
### using two enable signals. The handling of this is done under LCD handler.
### The number are the pin numbers of the Raspberry Pi, not the GPIO numbers.
### If using a older Raspberry Pi with only 26 pins make sure you have the correct pin pinnumbers.

GPIO_PIN_RS = 32
GPIO_PIN_RW = None ## Raspberry Pi cannot handle if the display writes data. Could damage RPi. This pin on the LCD was connected to gound.
GPIO_PIN_E_TOP = 33
GPIO_PIN_E_BOTTOM = 31
GPIO_PIN_D4 = 36
GPIO_PIN_D5 = 35
GPIO_PIN_D6 = 38
GPIO_PIN_D7 = 40
LCD_COLUMNS = 40
LCD_ROWS = 2
LCD_DOT_SIZE = 8

LCD_BRIGHTNESS = 0 # to be used with PWM for control of the LCD brightness.

### Initialize the LCD
lcd_top = CharLCD(pin_rs=GPIO_PIN_RS, pin_rw=GPIO_PIN_RW,  pin_e=GPIO_PIN_E_TOP, pins_data=[GPIO_PIN_D4, GPIO_PIN_D5, GPIO_PIN_D6, GPIO_PIN_D7], numbering_mode=GPIO.BOARD, cols=LCD_COLUMNS, rows=LCD_ROWS, dotsize=LCD_DOT_SIZE)
lcd_bottom = CharLCD(pin_rs=GPIO_PIN_RS, pin_rw=GPIO_PIN_RW, pin_e=GPIO_PIN_E_BOTTOM, pins_data=[GPIO_PIN_D4, GPIO_PIN_D5, GPIO_PIN_D6, GPIO_PIN_D7], numbering_mode=GPIO.BOARD, cols=LCD_COLUMNS, rows=LCD_ROWS, dotsize=LCD_DOT_SIZE)

#lcd_top.write_string("                 Hello\n\r                  and")
#lcd_bottom.write_string("                Welcome\n\r")

var = 1
i = 0

def getTime():
	"Gets the current time and date and returns as a string"
	time=strftime("%a %Y-%m-%d %H:%M:%S")
	return time

def printLine( lineNr, str):
	#print lineNr
	#print str
	if lineNr==0 or lineNr==1:
		#print "Top LCD"
		#print lineNr
		lcd_top.cursor_pos=(lineNr,0)
		lcd_top.write_string(str)
	elif lineNr==2 or lineNr==3:
		lineNr-=2
		#print lineNr
		#print "Bottom LCD"
		lcd_bottom.cursor_pos=(lineNr,0)
		lcd_bottom.write_string(str)
	#print "Finished printing"
	return

def getCurTemp():
	with open ("curTemp", "r") as myfile:
		temp=myfile.read().rstrip()
	return temp

def firstString():
	degree_sign=unichr(176).)
	str = "Lund "+getCurTemp()+degree_sign+"C"
	print str
	return str


while var == 1:
	i=i+1
	uptime=i/600
	#print "Testfunktion coming"
	
	printLine(0,getTime())
	printLine(1,firstString())
	sleep(100.0/1000.0)

